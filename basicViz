# Install necessary libraries (if not already installed)
!pip install pandas networkx matplotlib community

import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
import community as co

# -------------------- Data Loading and Formatting --------------------
# Assuming the data is in a CSV file named 'hyperobjects.csv'
# and the file is uploaded to the Colab environment.

# CSV structure: Term,Role,Intensity,Hyperobject

csv_file = 'hyperobjects.csv'  # Replace with your actual filename

try:
    df = pd.read_csv(csv_file)
    print("Data loaded successfully from", csv_file)
except FileNotFoundError:
    print(f"Error: File '{csv_file}' not found.  Make sure it's uploaded to Colab.")
    exit() # Stop execution if the file is not found


# Display the first few rows of the DataFrame to verify the structure
print("\nFirst 5 rows of the DataFrame:")
print(df.head())

# Data Cleaning (Very Important!)
# Check for missing values
print("\nMissing values per column:")
print(df.isnull().sum())

# Remove rows with missing values (handle more intelligently in a real application)
df = df.dropna()

# Check for duplicates (remove if any)
print("\nNumber of duplicate rows:", df.duplicated().sum())
df = df.drop_duplicates()

# Verify data types
print("\nData types of each column:")
print(df.dtypes)

# Convert Intensity to numeric (if needed)
df['Intensity'] = pd.to_numeric(df['Intensity'], errors='coerce') # errors='coerce' turns non-numeric values into NaN

# Remove rows where Intensity is NaN after conversion.
df = df.dropna(subset=['Intensity'])

# Check if 'Intensity' is now numeric:
print("\nData type of Intensity after conversion:", df['Intensity'].dtype)

# Example: Print some descriptive statistics for 'Intensity'
print("\nDescriptive statistics for Intensity:")
print(df['Intensity'].describe())


# -------------------- Network Construction --------------------

G = nx.DiGraph() # Directed graph because roles imply directionality

# Add nodes (terms and hyperobjects)
terms = df['Term'].unique()
hyperobjects = df['Hyperobject'].unique()  # Assuming "Hyperobject" is a column

G.add_nodes_from(terms, node_type='term')
G.add_nodes_from(hyperobjects, node_type='hyperobject')


# Add edges (relationships)
for index, row in df.iterrows():
    term = row['Term']
    position = row['Position']
    hyperobject = row['Hyperobject']
    role = row['Role']
    intensity = row['Intensity']

    # The direction of the edge depends on the role.  Adjust as needed.
    if role == 'Driver':
      G.add_edge(hyperobject, term, relationship=role, weight=intensity)  # Hyperobject -> Term
    elif role == 'Contributor':
      G.add_edge(hyperobject, term, relationship=role, weight=intensity)  # Hyperobject -> Term
    elif role == 'Connected to':
      G.add_edge(hyperobject, term, relationship=role, weight=intensity)  # Hyperobject <-> Term. Decide direction or make it undirected
    elif role == 'Facilitator':
      G.add_edge(hyperobject, term, relationship=role, weight=intensity)  # Hyperobject -> Term
    else:
      print(f"Warning: Unknown role '{role}' in row {index}. Skipping edge.")

print("\nGraph created successfully.")
# Use nx.info is deprecated
print(f"Number of nodes: {G.number_of_nodes()}")
print(f"Number of edges: {G.number_of_edges()}")

# -------------------- Basic Network Analysis --------------------
print("\nNetwork Density:", nx.density(G))
if nx.is_weakly_connected(G):  # Check if the graph is weakly connected before calculating average shortest path length
    try:
        avg_shortest_path_length = nx.average_shortest_path_length(G)
        print("Average Shortest Path Length:", avg_shortest_path_length)
    except nx.NetworkXError as e:
        print(f"Error calculating average shortest path length: {e}")  # Handle disconnected graph
else:
    print("Graph is not weakly connected. Cannot calculate average shortest path length.")


# -------------------- Centrality Analysis --------------------

# Degree Centrality (In-degree and Out-degree are important for a directed graph)
in_degree_centrality = nx.in_degree_centrality(G)
out_degree_centrality = nx.out_degree_centrality(G)

# Betweenness Centrality (can be computationally expensive for large graphs)
try:
    betweenness_centrality = nx.betweenness_centrality(G)
except Exception as e:
    print(f"Error calculating betweenness centrality: {e}")
    betweenness_centrality = {}


# Print top 5 nodes by in-degree centrality
print("\nTop 5 Nodes by In-Degree Centrality:")
sorted_in_degree = sorted(in_degree_centrality.items(), key=lambda x: x[1], reverse=True)[:5]
for node, centrality in sorted_in_degree:
    print(f"{node}: {centrality}")

# Print top 5 nodes by out-degree centrality
print("\nTop 5 Nodes by Out-Degree Centrality:")
sorted_out_degree = sorted(out_degree_centrality.items(), key=lambda x: x[1], reverse=True)[:5]
for node, centrality in sorted_out_degree:
    print(f"{node}: {centrality}")

# Print top 5 nodes by betweenness centrality (if calculated)
if betweenness_centrality:
    print("\nTop 5 Nodes by Betweenness Centrality:")
    sorted_betweenness = sorted(betweenness_centrality.items(), key=lambda x: x[1], reverse=True)[:5]
    for node, centrality in sorted_betweenness:
        print(f"{node}: {centrality}")


# -------------------- Community Detection (Louvain Algorithm) --------------------
#  Community detection is more suitable for undirected graphs.

# Convert DiGraph to undirected graph for community detection
UG = G.to_undirected()

try:
  partition = co.best_partition(UG)
  modularity = co.modularity(partition, UG)

  print("\nModularity:", modularity)

  # Print nodes and their community assignments
  print("\nCommunity Assignments:")
  for node, community_id in partition.items():
      print(f"{node}: Community {community_id}")

except Exception as e:
  print(f"Error during community detection: {e}")



# -------------------- Visualization (Basic) --------------------
# WARNING:  For large graphs, this can be very slow and the plot will be unreadable.

plt.figure(figsize=(12, 8))
pos = nx.spring_layout(G, k=0.5)  # You can try different layouts
nx.draw(G, pos, with_labels=True, node_size=500, node_color='skyblue', font_size=8, font_color='black', edge_color='gray')
plt.title("Hyperobject Network (Basic Visualization)")
plt.show()

print("\nScript completed.")
