import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

# Load the filtered influence ontology
df = pd.read_csv("filtered_influence_ontology.csv")

# Create a directed graph
G = nx.DiGraph()

# Add nodes and edges with attributes
for _, row in df.iterrows():
    source, relation, target, intensity = row["Source"], row["Relation"], row["Target"], row["Intensity"]
    G.add_edge(source, target, label=relation, weight=intensity)

# Define node size based on connectivity
node_sizes = [G.degree(node) * 300 for node in G.nodes()]  # Scale for visibility

# Define edge attributes
edges = G.edges(data=True)
edge_weights = [data['weight'] for _, _, data in edges]

# Normalize weights for visualization
min_weight, max_weight = min(edge_weights), max(edge_weights)
edge_widths = [1 + 5 * ((w - min_weight) / (max_weight - min_weight)) for w in edge_weights]  # Scale thickness

# Define layout
pos = nx.spring_layout(G, seed=42, k=0.3)  # k controls node spacing

# Draw graph
plt.figure(figsize=(100, 80))
nx.draw(G, pos, with_labels=True, node_size=node_sizes, font_size=10, edge_color=edge_weights, edge_cmap=plt.cm.Blues, width=edge_widths, alpha=0.75)

# Draw edge labels (influence types)
edge_labels = {(u, v): d["label"] for u, v, d in edges}
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=9)

# Show plot
plt.title("Influence Relationship Graph")
plt.show()
